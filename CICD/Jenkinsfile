import groovy.json.JsonSlurper

node(label: 'master'){
    // def branches = ["r1.0", "r1.1"]
    def builders = [:]
    def image_tag ="$BUILD_TAG".toLowerCase()
    def docker_parsed_path = "/data/fastestimator_web"
    def local_parsed_path = "/home/ubuntu/fastestimator_web"
    def asset_path = "src/assets/branches"
    def branches = new JsonSlurper()

    stage("clean"){
        sh "rm -rf $docker_parsed_path/*"
    }

    stage("read json"){
        checkout scm
        def file_content = readFile encoding: 'utf-8', file: 'CICD/branches.json'
        branches.parseText(file_content)
    }

    for (x in branches) {
        def branch = x.name // Need to bind the label variable before the closure - can't do 'for (label in labels)'
        def fe_repo = "fastestimator_" + branch
        def image_name = image_tag + branch

        // Create a map to pass in to the 'parallel' step so we can fire all the builds at once
        builders[branch] = {
          node {
            stage("get FE"){
                checkout scm
                sh "rm -rf $fe_repo"
                sh "git clone -b $branch https://github.com/geez0219/fastestimator.git $fe_repo"
            }

            stage("parse"){
                def customImage = docker.build(image_name, "--no-cache --build-arg InstallFE=False - < $fe_repo/docker/stable/Dockerfile.cpu")
                try {
                    customImage.inside("-u root -v $local_parsed_path:$docker_parsed_path") {
                        sh "pip install --no-cache-dir ./$fe_repo"
                        sh "pip install jupyter"
                        sh "python parser_files/parse_all.py $fe_repo $docker_parsed_path/$branch $branch"
                    }
                }
                finally {
                    sh "docker rmi ${image_name}"
                }
            }
          }
        }
    }

    parallel builders

    stage("build"){
        checkout scm
        sh "cp -r $docker_parsed_path $asset_path"
        sh "cp CICD/branches.json $asset_path"
        sh "npm install"
        sh "npm run build:ssr"
    }
}